---
title: Elasticsearch 코드로 알아보는 생명주기 상태 관리
lang: ko
layout: post
---

## 들어가며

- Elasticsearch Server에서 핵심이 되는 클래스인 `Node.java`를 살펴보며, 생명주기 상태 관리를 알아봅니다.
- Lucene 검색엔진을 이용하지 않고, Elasticsearch의 경량화된 버전을 직접 구현해보는 프로젝트의 사전 작업에 가까운 글입니다.

## 생명주기 상태 관리

Elasticsearch보다 경량화된 문서 기반 NoSQL 데이터베이스를 직접 설계하며 구현하는 프로젝트를 진행중인데요. 이 과정에서 Elasticsearch의 소스코드를 살펴보게 되는 것은 설계 시 어려움을 극복하기 위해서도 필수적인 작업입니다.

특히, 처음 설계를 시작하며 생명주기 상태 관리를 어떻게 구현할지 고민하게 되었는데요. 따라서 Elasticsearch의 소스코드를 살펴보며 생명주기 상태 관리를 어떻게 구현하고 있는지 알아보고, 이를 참고하여 프로젝트를 진행해보려 합니다.

### 생명주기의 중요성

데이터베이스 시스템에서 생명주기 상태 관리는 시스템의 안정성과 신뢰성을 보장하는 핵심 요소인데요. 특히, 분산 시스템과 고가용성보다는 크게 상태 기반 제어와 리소스 관리에 중점을 두어 생명주기 상태 관리의 중요성을 파악했습니다.

1. 상태 기반 로직 제어

데이터베이스 서버의 동작이 상태 기반 로직에 따라 결정되도록 선택했습니다. 예를 들어, 데이터베이스 서버는 상태를 확인하고, 상태에 따라 로직을 제어하고 예외를 던집니다. `STARTED` 상태에서만 쿼리를 받아들이고, `STOPPED` 상태에서는 쿼리를 거부하듯이 말입니다.

2. 리소스 최적화

시스템에서는 할당과 해제를 거치면서 리소스를 최적화하는 것이 중요한데요. 이는 메모리와 디스크 공간을 효율적으로 사용하기 위함입니다. 시스템이 초기화되었을 때에는 최소한의 리소스만이 투입되어야 하고, 시스템이 활성화되어 작업을 수행할 때는 적절한 최대한의 리소스를 할당해야 합니다. 마찬가지로, 시스템이 중지되었을 때와 완전히 종료되었을 때에도 차등적인 리소스 해제가 필수적임을 알 수 있겠습니다.
