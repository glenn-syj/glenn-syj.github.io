---
title: SSAFY 2학기 첫 번째 프로젝트 회고록
lang: ko
layout: post
---

## 들어가며

### Disclaimer

- Last Update: 2024/08/18

- SSAFY는 2학기 첫 프로젝트에 공통 프로젝트라는 이름이 붙였는데요. 이번 글은 해당 과정이 아니라 프로젝트에서 느낀점을 위주로 서술된 회고록입니다.
- SSAFY 과정 내부에서만 알 수 있는 내용은 최대한 서술하지 않았습니다.

<br/>

## 겪고 얻다

### 갑작스러운 Spring Security 기존 코드 개선

#### 겪다

- 배경

팀원들의 취업으로 인한 인원 부족으로, 기획 주차에 기존 팀이 해체되었습니다. 상세히 밝히기는 어렵지만, 팀장으로서 (저를 포함한) 남은 인원들이 정말로 필요로 하는 곳에 갈 수 있도록 적극적으로 행동했습니다. 다행히도 좋은 결과를 얻었습니다.

- 업무

기존 팀에서 학습하고 코드를 작성하던 채팅 기능 대신, 새로이 합류한 팀에서는 우선 Spring Security를 이용해 작성된 기존 회원 관리 코드 개선을 맡게 되었습니다.

#### 얻다

- 레거시 코드를 대하는 태도

  레거시 코드를 정의하는 여러 방식이 있지만, 저는 일방적인 대화가 이루어지는 코드로 정의하고 싶습니다. 당연하게도, 언제나 말을 거는 사람은 레거시 코드를 읽는 사람입니다.

  SSAFY나 여타 직업 훈련 기관에서는 쉽게 겪을 수 없지만, 실제로는 빈번한 일 중 하나가 레거시 코드를 개선하는 일이라고 생각합니다. 비록 완전히 갈아엎는 정도는 아니더라도요.

  이번에 맡은 Spring Security는 저도 처음 이용해보기도 하지만, 이전에 작성하시고 SSAFY를 취업 퇴소하신 분께서도 처음 이용해보셨던 프레임워크입니다.

  저는 팀원과 대화하면서, 기존 코드가 일단 인증 및 인가 흐름을 위해 작성되고 설정되었음을 파악하게 되었습니다. 그 덕에 흐름은 유지하되 잘못된 설정 등 미진한 부분만 빠르게 고쳐 회원 기능을 개선할 수 있었습니다.

  기존 코드를 개선하기 전에는 프로젝트 내에서의 중요도를 살펴볼 필요도 있다는 것을 실감할 수 있었습니다.

- Spring Security 5와 6에서의 차이 이해

  정확히는 Spring Security 5버전 이후, 5.4 버전 ~ 6 버전에서의 차이라고 봐도 되겠습니다.

  우선, Spring Security 5.4부터는 기존에 Config 설정을 위해 이용하던 `WebSecurityConfigurerAdapter`가 deprecated되었습니다. 대신 `SecurityFilterChain` 빈을 직접 등록하고 띄우는 방식을 이용합니다.

  또한, 보안 정책을 구성하는 `HttpSecurity`에서 메서드 체이닝이 개선되고, CSRF 및 CORS도 더욱 직관적으로 이용할 수 있도록 변화했습니다.

  인가 과정에서도 `AccessDecisionManager` 및 `AccessDecisionVoter` 대신 `AuthorizationManager`가 이용되면서 유연성이 더욱 강화되었습니다.
