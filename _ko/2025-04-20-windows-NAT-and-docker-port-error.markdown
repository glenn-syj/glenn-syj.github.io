---
title: 포트 에러로 시작하는 Docker Desktop 네트워크 뜯어보기
lang: ko
layout: post
---

## 들어가며

- Windows 환경에서 WSL을 이용해 Docker가 구동될 때, 해당 포트를 이용할 수 없다는 에러를 해결하는 과정과 그 뒤에 존재하는 NAT 개념을 살펴보는 글입니다.
- 최종 업데이트: 25/05/07

## 네트워크: HTTP 500 에러와 포트 바인딩에서 시작하기

```
(HTTP code 500) server error - Ports are not available: exposing port TCP 0.0.0.0:8065 -> 0.0.0.0:0: listen tcp 0.0.0.0:8065: bind: An attempt was made to access a socket in a way forbidden by its access permissions.
```

윈도우즈 환경에서 도커를 이용하며 분명히 지난 실행에서는 잘 되었는데, 갑작스럽게 포트를 이용할 수 없다는 에러가 발생하고는 합니다. 심지어는 `netstat` 명령어로 확인해보아도 해당 포트를 이용하는 프로세스를 찾을 수 없었습니다.

검색을 통해서 찾아낸 해결책은 간단했습니다. `Windows NAT`가 바로 문제였습니다. 해결 자체는 쉬웠습니다.

(1) `net stop winnat`
(2) 컨테이너 재시작
(3) `net start winnat`

그런데, Windows NAT란 도대체 뭐길래 포트 바인딩에서 문제를 일으킨 걸까요? 이런 문제가 발생할 때마다 winnat을 끄고, 시작하고, 켜는 과정을 반복해야할까요?

비록 클라우드 환경에서는 인스턴스에서 이용하는 대부분의 운영체제가 리눅스지만, 저 역시 노트북에서 윈도우즈를 이용하고 있으므로 Windows NAT와 도커 데스크탑에 대해서도 살펴보고자 합니다.

### 1. Windows NAT

Windows NAT에서 NAT는 Network Address Translation의 약어입니다. Windows NAT는 사설 네트워크의 여러 장치가 하나의 공인 IP를 공유하여 외부 네트워크와 통신할 수 있게 해주는데요. 이러한 통신을 위해서는 사설 네트워크와 공인 네트워크 사이의 매핑이 필요합니다.

사례를 들어서 이야기해보겠습니다. 글을 시작하며 살펴본 HTTP 500 에러는 실제로 프로젝트 중에 마주했던 에러인데요. `Mattermost` 라는 오픈소스 팀 메신저 서버를 8065 포트를 이용해 도커에서 띄우고자 했습니다.

```
[외부 네트워크]
↕️ (공인 IP)
┌─────────────────────────────────────┐
│ Windows Host (예: 192.168.0.100) │
│ ┌────────────────────────────────┐ │
│ │ Windows NAT │ │
│ │ ↕️ (포트 매핑: 8065 ↔ 8065) │ │
│ │ ┌────────────────────────────┐ │ │
│ │ │ tikkle-backend (172.18.0.0)│ │ │
│ │ │ ┌──────────────────────┐ │ │ │
│ │ │ │ Mattermost Container │ │ │ │
│ │ │ │ (172.18.0.8:8065) │ │ │ │
│ │ │ └──────────────────────┘ │ │ │
│ │ │ ┌──────────────────────┐ │ │ │
│ │ │ │ MariaDB (mm-db) │ │ │ │
│ │ │ │ (172.18.0.3:3306) │ │ │ │
│ │ │ └──────────────────────┘ │ │ │
│ │ └────────────────────────────┘ │ │
│ └────────────────────────────────┘ │
└─────────────────────────────────────┘

네트워크 흐름:
외부 요청 → Windows Host → Windows NAT → tikkle-backend → Mattermost Container
(8065) → (8065) → (매핑) → (172.18.0.8) → (8065)
```

위 그림을 살펴보면, Windows NAT는 Windows Host와 WSL 사이의 네트워크 통신을 관리하고 중개하는데요. 여기에서 외부에서의 호스트 IP와 내부 네트워크 IP 간에서 주소 변환이 이루어집니다. 이와 함께 해당 호스트 IP와 네트워크 주소 IP에서의 포트 매핑도 이루어지구요.

그렇다면, 왜 도커 데스크탑은 Windows NAT를 이용하게 되는 걸까요?

### 2. 도커 데스크탑과 WSL2

> "WSL 2는 Linux 배포를 설치할 때 기본 배포판 유형입니다. WSL 2는 가상화 기술을 사용하여 경량 유틸리티 VM(가상 머신) 내에서 Linux 커널을 실행합니다. Linux 배포판은 WSL 2 관리형 VM 내에서 격리된 컨테이너로 실행됩니다."
>
> [https://learn.microsoft.com/ko-kr/windows/wsl/about#what-is-wsl-2](https://learn.microsoft.com/ko-kr/windows/wsl/about#what-is-wsl-2)

도커 데스크탑은 Microsoft에서 제공하는 WSL2에 기반해 동적 메모리 할당이나 I/O 성능 향상 등 윈도우 환경에서의 성능을 향상하고 리소스를 관리합니다. 여기에서 Microsoft가 밝히듯이, WSL2는 NAT 기반 아키텍처를 이용합니다.

```
[외부 네트워크]
      |
[Windows Host]
      |
[vEthernet (WSL)]  ← Hyper-V 가상 스위치
      |
[WSL2 VM]
      |
[eth0 (리눅스 내부)]
```

WSL2는 경량 가상머신(VM)으로 동작하는데, 이는 Windows 호스트와 통신하기 위해 자체적인 가상 네트워크 어댑터(vEthernet)를 생성해 이용합니다. 이 가상 어댑터를 통해서 WSL2 VM은 독립된 IP 주소를 할당받고, Windows Host와는 기본적으로 NAT 기반 아키텍처로 통신합니다.

Docker Desktop은 실제로 WSL2를 백엔드로 이용하기 때문에, Docker의 모든 컨테이너는 실제로 WSL2 VM 내부에서 실행됩니다. 따라서 도커 네트워크는 VM 내부에 존재하는 것이고, 컨테이너도 네트워크 안에서 IP를 할당받아 통신합니다.

기본적으로 Windows NAT에서 이용하는 포트 포워딩은 `localhost`를 통해서 접근하도록 매핑됩니다. WSL2의 포트 포워딩 기능을 통해 Windows 호스트의 localhost에서 WSL2 VM 내부의 서비스(예: Docker 컨테이너)에 접근할 수 있습니다.

### 3. vEthernet 어댑터와 eth0

WSL2가 실행되면 Windows는 Hyper-V에 기반한 "vEthernet Adapter (WSL)"이라는 이름의 가상 네트워크 어댑터를 자동으로 생성합니다.

이 어댑터는 Windows 호스트와 WSL2 VM(가상머신) 사이의 네트워크 브리지 역할을 하며, NAT를 통해 서로 통신할 수 있도록 하는데요.

WSL2 내부(리눅스 환경)에서는 `eth0`이라는 네트워크 인터페이스도 자동으로 생성됩니다. 이 `eth0` 네트워크는 Hyper-V가 제공하는 가상 네트워크 어댑터에 연결되어 있으며, WSL2 VM이 부팅될 때 자동으로 생성됩니다.

`eth0` 인터페이스에는 WSL2 VM만의 고유한 내부 IP가 할당되며, 이 IP를 통해 리눅스 환경 내에서 네트워크 통신이 이루어집니다.

그러면 Hyper-V 가상 스위치는 어떻게 이 두 네트워크를 브리징하는 것일까요?

### 4. Hyper-V 가상 스위치

Hyper-V 가상 스위치는 실제 네트워크 스위치처럼 동작하지만, 소프트웨어적으로 구현되어 Hyper-V 환경에서 통신을 중계하는 역할을 하는 가상 스위치입니다.

Hyper-V 가상 스위치는 연결 수준에 따라 세 가지 유형으로 분류됩니다.

- 외부 스위치: 가상 머신과 물리적 네트워크(외부 네트워크) 간의 통신을 중계하는 스위치
- 내부 스위치: 가상 머신과 호스트 간, 그리고 가상 머신끼리의 통신을 중계하는 스위치
- 프라이빗 스위치: 가상 머신끼리만 통신할 수 있도록 중계하는 스위치

하지만 아쉽게도 WSL2와 관련된 Microsoft 공식 문서에서는 Hyper-V 가상 스위치 유형을 명시하거나 추가적으로 설명하고 있지는 않았습니다.
